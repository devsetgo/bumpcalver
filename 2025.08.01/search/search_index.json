{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Support Python Versions</p> <p> </p> <p>CI/CD Pipeline:</p> <p> </p> <p>SonarCloud:</p> <p> </p>"},{"location":"#bumpcalver-cli-documentation","title":"BumpCalver CLI Documentation","text":""},{"location":"#note","title":"Note","text":"<p>This project should be consider in beta as it could have bugs due to being only a few months old.</p>"},{"location":"#overview","title":"Overview","text":"<p>The BumpCalver CLI is a command-line interface for calendar-based version bumping. It automates the process of updating version strings in your project's files based on the current date and build count. Additionally, it can create Git tags and commit changes automatically. The CLI is highly configurable via a <code>pyproject.toml</code> file and supports various customization options to fit your project's needs.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>Documentation Site: BumpCalver CLI</p> </li> <li> <p>Installation</p> </li> <li>Getting Started</li> <li>Command-Line Usage</li> <li>Options</li> <li>Error Handling</li> <li>Support</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install the BumpCalver CLI, you can add it to your project's dependencies. If it's packaged as a Python module, you might install it via:</p> <pre><code>pip install bumpcalver\n</code></pre> <p>Note: Replace the installation command with the actual method based on how the package is distributed.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li> <p>Configure Your Project: Create or update the <code>pyproject.toml</code> file in your project's root directory to include the <code>[tool.bumpcalver]</code> section with your desired settings.</p> </li> <li> <p>Run the CLI: Use the <code>bumpcalver</code> command with appropriate options to bump your project's version.</p> </li> </ol> <p>Example:</p> <pre><code>bumpcalver --build --git-tag --auto-commit\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>The BumpCalver CLI relies on a <code>pyproject.toml</code> configuration file located at the root of your project. This file specifies how versioning should be handled, which files to update, and other settings.</p> <p>As an alternative, you can use configuration file named <code>bumpcalver.toml</code>. The CLI will look for this file if <code>pyproject.toml</code> is not found.</p>"},{"location":"#configuration-options","title":"Configuration Options","text":"<ul> <li><code>version_format</code> (string): Format string for the version. Should include <code>{current_date}</code> and <code>{build_count}</code> placeholders.</li> <li><code>date_format</code> (string): Format string for the date. Supports various combinations of year, month, day, quarter, and week.</li> <li><code>timezone</code> (string): Timezone for date calculations (e.g., <code>UTC</code>, <code>America/New_York</code>).</li> <li><code>file</code> (list of tables): Specifies which files to update and how to find the version string.</li> <li><code>path</code> (string): Path to the file to be updated.</li> <li><code>file_type</code> (string): Type of the file (e.g., <code>python</code>, <code>toml</code>, <code>yaml</code>, <code>json</code>, <code>xml</code>, <code>dockerfile</code>, <code>makefile</code>, <code>properties</code>, <code>env</code>, <code>setup.cfg</code>).</li> <li><code>variable</code> (string, optional): The variable name that holds the version string in the file.</li> <li><code>pattern</code> (string, optional): A regex pattern to find the version string.</li> <li><code>version_standard</code> (string, optional): The versioning standard to follow (e.g., <code>python</code> for PEP 440).</li> <li><code>git_tag</code> (boolean): Whether to create a Git tag with the new version.</li> <li><code>auto_commit</code> (boolean): Whether to automatically commit changes when creating a Git tag.</li> </ul>"},{"location":"#example-configuration","title":"Example Configuration","text":"<pre><code>[tool.bumpcalver]\nversion_format = \"{current_date}-{build_count:03}\"\ndate_format = \"%y.%m.%d\"\ntimezone = \"America/New_York\"\ngit_tag = true\nauto_commit = true\n\n[[tool.bumpcalver.file]]\npath = \"pyproject.toml\"\nfile_type = \"toml\"\nvariable = \"project.version\"\nversion_standard = \"python\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/makefile\"\nfile_type = \"makefile\"\nvariable = \"APP_VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/dockerfile\"\nfile_type = \"dockerfile\"\nvariable = \"arg.VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/dockerfile\"\nfile_type = \"dockerfile\"\nvariable = \"env.APP_VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/p.py\"\nfile_type = \"python\"\nvariable = \"__version__\"\nversion_standard = \"python\"\n\n[[tool.bumpcalver.file]]\npath = \"sonar-project.properties\"\nfile_type = \"properties\"\nvariable = \"sonar.projectVersion\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \".env\"\nfile_type = \"env\"\nvariable = \"VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"setup.cfg\"\nfile_type = \"setup.cfg\"\nvariable = \"metadata.version\"\nversion_standard = \"python\"\n</code></pre>"},{"location":"#date-format-examples","title":"Date Format Examples","text":"<p>The <code>date_format</code> option allows you to customize the date format used in version strings. Here are some examples of how to format dates:</p> <ul> <li><code>%Y.%m.%d</code> - Full year, month, and day (e.g., <code>2024.12.25</code>)</li> <li><code>%y.%m.%d</code> - Year without century, month, and day (e.g., <code>24.12.25</code>)</li> <li><code>%y.Q%q</code> - Year and quarter (e.g., <code>24.Q1</code>)</li> <li><code>%y.%m</code> - Year and month (e.g., <code>24.12</code>)</li> <li><code>%y.%j</code> - Year and day of the year (e.g., <code>24.001</code> for January 1st, 2024)</li> <li><code>%Y.%j</code> - Full year and day of the year (e.g., <code>2024.001</code> for January 1st, 2024)</li> <li><code>%Y.%m</code> - Full year and month (e.g., <code>2024.12</code>)</li> <li><code>%Y.Q%q</code> - Full year and quarter (e.g., <code>2024.Q1</code>)</li> </ul> <p>Refer to the Python datetime documentation for more format codes.</p>"},{"location":"#supported-file-types","title":"Supported File Types","text":"<p>BumpCalver supports version management for the following file types:</p>"},{"location":"#core-file-types","title":"Core File Types","text":"<ul> <li><code>python</code> - Python files with version variables (e.g., <code>__version__ = \"1.0.0\"</code>)</li> <li><code>toml</code> - TOML configuration files (e.g., <code>pyproject.toml</code>)</li> <li><code>yaml</code> - YAML configuration files</li> <li><code>json</code> - JSON configuration files (e.g., <code>package.json</code>)</li> <li><code>xml</code> - XML configuration files</li> </ul>"},{"location":"#infrastructure-files","title":"Infrastructure Files","text":"<ul> <li><code>dockerfile</code> - Docker files with ARG or ENV variables</li> <li><code>makefile</code> - Makefiles with version variables</li> </ul>"},{"location":"#configuration-files","title":"Configuration Files","text":"<ul> <li><code>properties</code> - Java-style properties files (e.g., <code>sonar-project.properties</code>)</li> <li>Format: <code>key=value</code></li> <li>Example: <code>sonar.projectVersion=2025.02.02</code></li> <li><code>env</code> - Environment variable files (e.g., <code>.env</code>)</li> <li>Format: <code>KEY=value</code> or <code>KEY=\"value\"</code></li> <li>Example: <code>VERSION=2025.02.02</code></li> <li><code>setup.cfg</code> - Python setup configuration files</li> <li>Supports both dot notation (<code>metadata.version</code>) and simple keys (<code>version</code>)</li> <li>Example: <code>version = 2025.02.02</code> in <code>[metadata]</code> section</li> </ul>"},{"location":"#command-line-usage","title":"Command-Line Usage","text":"<p>The CLI provides several options to customize the version bumping process.</p> <pre><code>Usage: bumpcalver [OPTIONS]\n\nOptions:\n  --beta                      Use beta versioning.\n  --build                     Use build count versioning.\n  --timezone TEXT             Timezone for date calculations (default: value\n                              from config or America/New_York).\n  --git-tag / --no-git-tag    Create a Git tag with the new version.\n  --auto-commit / --no-auto-commit\n                              Automatically commit changes when creating a Git\n                              tag.\n  --help                      Show this message and exit.\n</code></pre>"},{"location":"#options","title":"Options","text":"<ul> <li><code>--beta</code>: Prefixes the version with <code>beta-</code>.</li> <li><code>--build</code>: Increments the build count based on the current date.</li> <li><code>--timezone</code>: Overrides the timezone specified in the configuration.</li> <li><code>--git-tag</code> / <code>--no-git-tag</code>: Forces Git tagging on or off, overriding the configuration.</li> <li><code>--auto-commit</code> / <code>--no-auto-commit</code>: Forces auto-commit on or off, overriding the configuration.</li> </ul>"},{"location":"#examples","title":"Examples","text":""},{"location":"#basic-version-bump","title":"Basic Version Bump","text":"<p>To bump the version using the current date and build count:</p> <pre><code>bumpcalver --build\n</code></pre>"},{"location":"#beta-versioning","title":"Beta Versioning","text":"<p>To create a beta version:</p> <pre><code>bumpcalver --build --beta\n</code></pre>"},{"location":"#specifying-timezone","title":"Specifying Timezone","text":"<p>To use a specific timezone:</p> <pre><code>bumpcalver --build --timezone Europe/London\n</code></pre>"},{"location":"#creating-a-git-tag-with-auto-commit","title":"Creating a Git Tag with Auto-Commit","text":"<p>To bump the version, commit changes, and create a Git tag:</p> <pre><code>bumpcalver --build --git-tag --auto-commit\n</code></pre>"},{"location":"#error-handling","title":"Error Handling","text":"<ul> <li>Unknown Timezone: If an invalid timezone is specified, the default timezone (<code>America/New_York</code>) is used, and a warning is printed.</li> <li>File Not Found: If a specified file is not found during version update, an error message is printed.</li> <li>Invalid Build Count: If the existing build count in a file is invalid, it resets to <code>1</code>, and a warning is printed.</li> <li>Git Errors: Errors during Git operations are caught, and an error message is displayed.</li> <li>Malformed Configuration: If the <code>pyproject.toml</code> file is malformed, an error is printed, and the program exits.</li> </ul>"},{"location":"#support","title":"Support","text":"<p>For issues or questions, please open an issue on the project's repository.</p>"},{"location":"about/","title":"About","text":"<p>BumpCalver Library is a library to help manage \"calendar version\" (CalVer) strings. You can update the version string in TOML, YAML, XML, JSON, Makefile, Dockerfile, and Python files. It follows PEP440 for Python packages, but is not intended to only be for Python pacakges. It supports git tags like beta, release, release-candidate, and custom tags of your own choosing. It has support for Timezones and build counts. It is a simple library that can be used in any project that needs to manage versioning.</p> <p>The library is written in Python and is available on PyPi. It is open source and available on GitHub. Feel free to use it in your projects and contribute to the library.</p>"},{"location":"about/#about-me","title":"About Me","text":"<p>I am a software engineering manager with an eclectic background in various industries (finance, manufacturing, and metrology). I am passionate about software development and love to learn new things.</p> <ul> <li>DevSetGo.com</li> <li>Github</li> </ul>"},{"location":"contribute/","title":"Contributing","text":"<p>Please feel to contribute to this project. Adding common functions is the intent and if you have one to add or improve an existing it is greatly appreciated.</p>"},{"location":"contribute/#ways-to-contribute","title":"Ways to Contribute!","text":"<ul> <li>Add or improve a function</li> <li>Add or improve documentation</li> <li>Add or improve Tests</li> <li>Report or fix a bug</li> </ul>"},{"location":"mike-quickref/","title":"Mike Documentation Versioning - Quick Reference","text":""},{"location":"mike-quickref/#quick-commands","title":"Quick Commands","text":""},{"location":"mike-quickref/#deploy-documentation","title":"Deploy Documentation","text":"<pre><code># Deploy current version (auto-detected)\nmake create-docs                 # Push to remote\nmake create-docs-local          # Local only\n\n# Deploy development version  \nmake create-docs-dev            # Push dev version\n\n# Deploy specific version\npython3 scripts/deploy_docs.py deploy --version 2025.08.01 --aliases latest stable --push\n</code></pre>"},{"location":"mike-quickref/#manage-versions","title":"Manage Versions","text":"<pre><code># List all versions\nmake list-docs\n\n# Serve locally (all versions)\nmake serve-docs\n\n# Delete version\nmake delete-version VERSION=2025.07.01\n\n# Set default version\nmake set-default-version VERSION=latest\n</code></pre>"},{"location":"mike-quickref/#advanced-usage","title":"Advanced Usage","text":"<pre><code># Deploy with custom title\npython3 scripts/deploy_docs.py deploy --version 2025.08.01 --title \"August 2025 Release\" --push\n\n# Deploy dev version with custom name\npython3 scripts/deploy_docs.py deploy --dev --version staging --push\n\n# Deploy without aliases\npython3 scripts/deploy_docs.py deploy --version 2025.08.01 --push\n</code></pre>"},{"location":"mike-quickref/#version-strategy","title":"Version Strategy","text":"Version Type Format Example When to Use Release YYYY.MM.DD 2025.08.01 Tagged releases Development dev dev Active development Staging staging staging Pre-release testing Aliases latest/stable latest User-friendly URLs"},{"location":"mike-quickref/#url-structure","title":"URL Structure","text":"URL Points To Description <code>/</code> Default version Usually <code>latest</code> <code>/latest/</code> Latest release Most recent version <code>/stable/</code> Stable release Production-ready <code>/dev/</code> Development Bleeding edge <code>/2025.08.01/</code> Specific version Permanent link"},{"location":"mike-quickref/#integration-points","title":"Integration Points","text":""},{"location":"mike-quickref/#with-bumpcalver","title":"With BumpCalver","text":"<ul> <li>Auto-detects version from <code>makefile</code>, <code>pyproject.toml</code>, <code>__init__.py</code></li> <li>Consistent versioning across project and docs</li> <li>Automated workflow on version bumps</li> </ul>"},{"location":"mike-quickref/#with-github-actions","title":"With GitHub Actions","text":"<ul> <li><code>dev</code> branch \u2192 <code>dev</code> documentation</li> <li><code>main</code> branch \u2192 <code>latest</code> documentation  </li> <li>Git tags \u2192 versioned + <code>stable</code> documentation</li> </ul>"},{"location":"mike-quickref/#with-mkdocs-material-theme","title":"With MkDocs Material Theme","text":"<ul> <li>Automatic version selector in navigation</li> <li>Responsive design across versions</li> <li>Search within specific versions</li> </ul>"},{"location":"modules/","title":"Functions","text":""},{"location":"modules/#get_current_date","title":"<code>get_current_date()</code>","text":"<p>Returns the current date in the specified timezone.</p> <p>Signature:</p> <pre><code>def get_current_date(timezone: str = default_timezone) -&gt; str:\n</code></pre> <p>Parameters:</p> <ul> <li><code>timezone</code> (str): The timezone to use for date calculations. Defaults to <code>\"America/New_York\"</code>.</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The current date in the format <code>\"YYYY-MM-DD\"</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>ZoneInfoNotFoundError</code>: If the specified timezone is invalid.</li> </ul> <p>Example:</p> <pre><code>current_date = get_current_date(timezone=\"UTC\")\n</code></pre>"},{"location":"modules/#get_current_datetime_version","title":"<code>get_current_datetime_version()</code>","text":"<p>Returns the current date and time in the specified timezone.</p> <p>Signature:</p> <pre><code>def get_current_datetime_version(timezone: str = default_timezone) -&gt; str:\n</code></pre> <p>Parameters:</p> <ul> <li><code>timezone</code> (str): The timezone to use for date and time calculations.</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The current date and time in the format <code>\"YYYY-MM-DD-HHMM\"</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>ZoneInfoNotFoundError</code>: If the specified timezone is invalid.</li> </ul> <p>Example:</p> <pre><code>current_datetime_version = get_current_datetime_version(timezone=\"UTC\")\n</code></pre>"},{"location":"modules/#get_build_version","title":"<code>get_build_version()</code>","text":"<p>Generates a build version based on the current date and build count.</p> <p>Signature:</p> <pre><code>def get_build_version(file_config: dict, version_format: str, timezone: str = default_timezone) -&gt; str:\n</code></pre> <p>Parameters:</p> <ul> <li><code>file_config</code> (dict): Configuration for the file containing the version string.</li> <li><code>path</code> (str): File path.</li> <li><code>variable</code> (str, optional): The variable name holding the version.</li> <li><code>pattern</code> (str, optional): A regex pattern to locate the version string.</li> <li><code>version_format</code> (str): Format string for the version, including placeholders <code>{current_date}</code> and <code>{build_count}</code>.</li> <li><code>timezone</code> (str): Timezone for date calculations.</li> </ul> <p>Returns:</p> <ul> <li><code>str</code>: The generated build version.</li> </ul> <p>Raises:</p> <ul> <li><code>ValueError</code>: If the version format is invalid.</li> <li><code>KeyError</code>: If required keys are missing in <code>file_config</code>.</li> </ul> <p>Example:</p> <pre><code>file_config = {\"path\": \"version.py\", \"variable\": \"__version__\"}\nversion = get_build_version(file_config, \"{current_date}-{build_count:03}\", timezone=\"UTC\")\n</code></pre>"},{"location":"modules/#update_version_in_files","title":"<code>update_version_in_files()</code>","text":"<p>Updates the version string in the specified files.</p> <p>Signature:</p> <pre><code>def update_version_in_files(new_version: str, file_configs: list[dict]) -&gt; list[str]:\n</code></pre> <p>Parameters:</p> <ul> <li><code>new_version</code> (str): The new version string to set.</li> <li><code>file_configs</code> (list of dict): List of file configurations.</li> </ul> <p>Returns:</p> <ul> <li><code>list[str]</code>: List of files that were updated.</li> </ul> <p>Raises:</p> <ul> <li><code>FileNotFoundError</code>: If a specified file is not found.</li> <li><code>Exception</code>: If an error occurs while updating a file.</li> </ul> <p>Example:</p> <pre><code>file_configs = [\n    {\"path\": \"version.py\", \"variable\": \"__version__\"},\n    {\"path\": \"setup.cfg\", \"pattern\": r\"^version = .*$\"},\n]\nupdated_files = update_version_in_files(\"2023-10-05-001\", file_configs)\n</code></pre>"},{"location":"modules/#load_config","title":"<code>load_config()</code>","text":"<p>Loads the configuration from the <code>pyproject.toml</code> file.</p> <p>Signature:</p> <pre><code>def load_config() -&gt; dict:\n</code></pre> <p>Returns:</p> <ul> <li><code>dict</code>: A dictionary containing configuration settings.</li> </ul> <p>Raises:</p> <ul> <li><code>toml.TomlDecodeError</code>: If there is an error parsing the configuration file.</li> </ul> <p>Example:</p> <pre><code>config = load_config()\n</code></pre>"},{"location":"modules/#create_git_tag","title":"<code>create_git_tag()</code>","text":"<p>Creates a Git tag with the new version.</p> <p>Signature:</p> <pre><code>def create_git_tag(version: str, files_to_commit: list[str], auto_commit: bool) -&gt; None:\n</code></pre> <p>Parameters:</p> <ul> <li><code>version</code> (str): The version string to use as the Git tag.</li> <li><code>files_to_commit</code> (list of str): Files to commit before tagging.</li> <li><code>auto_commit</code> (bool): Whether to automatically commit changes.</li> </ul> <p>Raises:</p> <ul> <li><code>subprocess.CalledProcessError</code>: If an error occurs during Git operations.</li> </ul> <p>Example:</p> <pre><code>create_git_tag(\"2023-10-05-001\", [\"version.py\"], auto_commit=True)\n</code></pre>"},{"location":"modules/#main","title":"<code>main()</code>","text":"<p>CLI entry point for version bumping.</p> <p>Signature:</p> <pre><code>def main(beta: bool, build: bool, timezone: str, git_tag: bool, auto_commit: bool) -&gt; None:\n</code></pre> <p>Parameters:</p> <ul> <li><code>beta</code> (bool): Use beta versioning if <code>True</code>.</li> <li><code>build</code> (bool): Use build count versioning if <code>True</code>.</li> <li><code>timezone</code> (str): Timezone for date calculations.</li> <li><code>git_tag</code> (bool): Create a Git tag with the new version if <code>True</code>.</li> <li><code>auto_commit</code> (bool): Automatically commit changes when creating a Git tag if <code>True</code>.</li> </ul> <p>Raises:</p> <ul> <li><code>toml.TomlDecodeError</code>: If there is an error parsing the configuration file.</li> <li><code>ValueError</code>: If there is an error generating the version.</li> <li><code>KeyError</code>: If required keys are missing in the configuration.</li> </ul> <p>Example:</p> <p>This function is decorated with <code>click.command()</code> and is intended to be run from the command line.</p>"},{"location":"modules/#error-handling","title":"Error Handling","text":"<ul> <li> <p>Unknown Timezone: If an invalid timezone is specified, the default timezone (<code>America/New_York</code>) is used, and a warning is printed.</p> </li> <li> <p>File Not Found: If a specified file is not found during version update, an error message is printed.</p> </li> <li> <p>Invalid Build Count: If the existing build count in a file is invalid, it resets to <code>1</code>, and a warning is printed.</p> </li> <li> <p>Git Errors: Errors during Git operations are caught, and an error message is displayed.</p> </li> <li> <p>Malformed Configuration: If the <code>pyproject.toml</code> file is malformed, an error is printed, and the program exits.</p> </li> </ul>"},{"location":"modules/#license","title":"License","text":"<p>Include license information here if applicable.</p>"},{"location":"modules/#additional-notes","title":"Additional Notes","text":"<ul> <li> <p>Customization: The CLI is designed to be flexible. By modifying the <code>version_format</code> in the configuration, you can change how versions are generated.</p> </li> <li> <p>File Configuration: You can specify multiple files in the <code>file</code> section of the configuration to update version strings in different places.</p> </li> <li> <p>Version Patterns: If the <code>variable</code> approach doesn't suit your files, you can use regex <code>pattern</code> to locate and replace the version string.</p> </li> </ul>"},{"location":"quickstart/","title":"Quick Start","text":""},{"location":"quickstart/#install","title":"Install","text":"<pre><code>pip install bumpcalver\n</code></pre>"},{"location":"quickstart/#usage","title":"Usage","text":""},{"location":"quickstart/#initialize-configuration","title":"Initialize Configuration","text":"<p>Create a <code>pyproject.toml</code> file in your project's root directory with the following content:</p> <pre><code>tool.bumpcalver]\nversion_format = \"{current_date}-{build_count:03}\"\ndate_format = \"%y.%m.%d\"\ntimezone = \"America/New_York\"\ngit_tag = true\nauto_commit = true\n\n[[tool.bumpcalver.file]]\npath = \"pyproject.toml\"\nfile_type = \"toml\"\nvariable = \"project.version\"\nversion_standard = \"python\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/makefile\"\nfile_type = \"makefile\"\nvariable = \"APP_VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"sonar-project.properties\"\nfile_type = \"properties\"\nvariable = \"sonar.projectVersion\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \".env\"\nfile_type = \"env\"\nvariable = \"VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"setup.cfg\"\nfile_type = \"setup.cfg\"\nvariable = \"metadata.version\"\nversion_standard = \"python\"\n</code></pre> <p>This configuration tells BumpCalver how to format your version strings, which timezone to use, and which files to update.</p>"},{"location":"quickstart/#basic-version-bump","title":"Basic Version Bump","text":"<p>To bump the version using the current date and build count:</p> <pre><code>bumpcalver --build\n</code></pre> <p>This command will:</p> <ul> <li>Increment the build count for the current date.</li> <li>Update the <code>__version__</code> variable in <code>version.py</code> and <code>src/module_name/__init__.py</code>.</li> <li>Use the timezone specified in your configuration (<code>UTC</code> in this case).</li> </ul>"},{"location":"quickstart/#beta-versioning","title":"Beta Versioning","text":"<p>To create a beta version:</p> <pre><code>bumpcalver --build --beta\n</code></pre> <p>This will prefix your version with <code>beta-</code>, resulting in a version like <code>beta-2023-10-05-001</code>.</p>"},{"location":"quickstart/#specify-timezone","title":"Specify Timezone","text":"<p>To use a specific timezone (overriding the configuration):</p> <pre><code>bumpcalver --build --timezone Europe/London\n</code></pre>"},{"location":"quickstart/#create-a-git-tag-with-auto-commit","title":"Create a Git Tag with Auto-Commit","text":"<p>To bump the version, commit changes, and create a Git tag:</p> <pre><code>bumpcalver --build --git-tag --auto-commit\n</code></pre> <p>This command will:</p> <ul> <li>Update the version as before.</li> <li>Commit the changes to Git.</li> <li>Create a Git tag with the new version.</li> </ul>"},{"location":"quickstart/#additional-options","title":"Additional Options","text":"<ul> <li>Disable Git Tagging:</li> </ul> <pre><code>bumpcalver --build --no-git-tag\n</code></pre> <ul> <li>Disable Auto-Commit:</li> </ul> <pre><code>bumpcalver --build --no-auto-commit\n</code></pre>"},{"location":"quickstart/#create-custom-date-formats","title":"Create Custom Date Formats","text":"<p>The <code>date_format</code> option in the configuration file allows you to customize the date format used in version strings. Here are some examples of how to format dates:</p> <ul> <li><code>%Y.%m.%d</code> - Full year, month, and day (e.g., <code>2024.12.25</code>)</li> <li><code>%y.%m.%d</code> - Year without century, month, and day (e.g., <code>24.12.25</code>)</li> <li><code>%y.Q%q</code> - Year and quarter (e.g., <code>24.Q1</code>)</li> <li><code>%y.%m</code> - Year and month (e.g., <code>24.12</code>)</li> <li><code>%y.%j</code> - Year and day of the year (e.g., <code>24.001</code> for January 1st, 2024)</li> <li><code>%Y.%j</code> - Full year and day of the year (e.g., <code>2024.001</code> for January 1st, 2024)</li> <li><code>%Y.%m</code> - Full year and month (e.g., <code>2024.12</code>)</li> <li><code>%Y.Q%q</code> - Full year and quarter (e.g., <code>2024.Q1</code>)</li> </ul>"},{"location":"quickstart/#see-documentation","title":"See Documentation","text":"<p>For more examples and advanced usage, please refer to the full documentation or visit the project's repository.</p> <p>Note: Replace <code>#</code> with the actual link to your documentation or repository.</p>"},{"location":"quickstart/#example-versionpy-file","title":"Example <code>version.py</code> File","text":"<p>Ensure that your <code>version.py</code> file (or the file specified in your configuration) contains the version variable:</p> <pre><code>__version__ = \"0.1.0\"\n</code></pre> <p>After running <code>bumpcalver --build</code>, it will be updated to:</p> <pre><code>__version__ = \"2023-10-05-001\"\n</code></pre>"},{"location":"quickstart/#integrate-with-your-project","title":"Integrate with Your Project","text":"<p>You can import the version into your application as needed:</p> <pre><code>from version import __version__\n\nprint(f\"Current version: {__version__}\")\n</code></pre>"},{"location":"quickstart/#summary","title":"Summary","text":"<p>With BumpCalver, you can automate version management based on the calendar date and build counts, ensuring consistent and meaningful version numbers across your project.</p>"},{"location":"release-notes/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog</p>"},{"location":"release-notes/#latest-changes","title":"Latest Changes","text":""},{"location":"release-notes/#improved-documentation-and-update-of-dependencies-v20254121","title":"Improved documentation and update of dependencies (v2025.4.12.1)","text":""},{"location":"release-notes/#whats-changed","title":"What's Changed","text":"<ul> <li>Improving Documentation (#47) @devsetgo</li> <li>pip(deps): bump pytest from 8.3.4 to 8.3.5 (#42) @dependabot[bot]</li> <li>pip(deps): bump mkdocs-print-site-plugin from 2.6.0 to 2.7.2 (#44) @dependabot[bot]</li> <li>pip(deps): bump pylint from 3.3.4 to 3.3.6 (#43) @dependabot[bot]</li> <li>pip(deps): bump mkdocs-material from 9.6.6 to 9.6.11 (#45) @dependabot[bot]</li> <li>pip(deps): bump genbadge[all] from 1.1.1 to 1.1.2 (#46) @dependabot[bot]</li> <li>pip(deps): bump mkdocstrings[python,shell] from 0.27.0 to 0.28.2 (#37) @dependabot[bot]</li> <li>pip(deps): bump twine from 6.0.1 to 6.1.0 (#38) @dependabot[bot]</li> <li>pip(deps): bump pylint from 3.3.3 to 3.3.4 (#39) @dependabot[bot]</li> <li>pip(deps): bump mkdocs-material from 9.5.49 to 9.6.6 (#40) @dependabot[bot]</li> <li>pip(deps): bump ruff from 0.9.4 to 0.9.9 (#41) @dependabot[bot]</li> <li>run of tests (#36) @devsetgo</li> <li>pip(deps): bump black from 24.10.0 to 25.1.0 (#31) @dependabot[bot]</li> <li>pip(deps): bump ruff from 0.8.4 to 0.9.4 (#32) @dependabot[bot]</li> <li>pip(deps): bump tox from 4.23.2 to 4.24.1 (#33) @dependabot[bot]</li> <li>pip(deps): bump pre-commit from 4.0.1 to 4.1.0 (#34) @dependabot[bot]</li> <li>pip(deps): bump autopep8 from 2.3.1 to 2.3.2 (#35) @dependabot[bot]</li> <li>pip(deps): bump ruff from 0.8.2 to 0.8.4 (#26) @dependabot[bot]</li> <li>pip(deps): bump hatchling from 1.26.3 to 1.27.0 (#27) @dependabot[bot]</li> <li>pip(deps): bump mkdocs-material from 9.5.47 to 9.5.49 (#28) @dependabot[bot]</li> <li>pip(deps): bump pylint from 3.3.2 to 3.3.3 (#29) @dependabot[bot]</li> <li>pip(deps): bump click from 8.1.7 to 8.1.8 (#30) @dependabot[bot]</li> </ul> <p>Published Date: 2025 April 12, 16:34</p>"},{"location":"release-notes/#fix-of-python-version-202412141","title":"Fix of Python Version (2024.12.14.1)","text":""},{"location":"release-notes/#whats-changed_1","title":"What's Changed","text":"<ul> <li>bump version (#25) @devsetgo</li> <li>working on trusted publishing (#24) @devsetgo</li> <li>Bump of Version 24.12.06-001 (#23) @devsetgo</li> <li>Enhancing Date Formatting Capability (#22) @devsetgo</li> <li>Adding BumpCalver.toml option (#16) @devsetgo</li> <li>pip(deps): bump ruff from 0.7.1 to 0.7.2 (#15) @dependabot</li> <li>pip(deps): bump mkdocs-material from 9.5.40 to 9.5.43 (#11) @dependabot</li> <li>pip(deps): bump ruff from 0.6.9 to 0.7.1 (#12) @dependabot</li> <li>pip(deps): bump tox from 4.21.2 to 4.23.2 (#13) @dependabot</li> <li>pip(deps): bump pytest-cov from 5.0.0 to 6.0.0 (#14) @dependabot</li> </ul> <p>Published Date: 2024 December 14, 20:10</p>"},{"location":"release-notes/#enhancing-date-formatting-capabilities-241206-001-x","title":"Enhancing Date Formatting Capabilities (24.12.06-001-x)","text":""},{"location":"release-notes/#whats-changed_2","title":"What's Changed","text":"<ul> <li>working on trusted publishing (#24) @devsetgo</li> </ul> <p>Published Date: 2024 December 14, 20:03</p>"},{"location":"release-notes/#enhancing-date-formatting-capabilites-241206-001","title":"Enhancing Date Formatting Capabilites (24.12.06-001)","text":""},{"location":"release-notes/#whats-changed_3","title":"What's Changed","text":"<ul> <li>Changing version to xx.xx.xx-build.</li> <li>Bump of Version 24.12.06-001 (#23) @devsetgo</li> <li>Enhancing Date Formatting Capability (#22) @devsetgo</li> </ul> <p>Published Date: 2024 December 06, 23:11</p>"},{"location":"release-notes/#bumpcalvertoml-option-2024-11-08","title":"BumpCalver.toml Option (2024-11-08)","text":""},{"location":"release-notes/#whats-changed_4","title":"What's Changed","text":"<ul> <li>Adding BumpCalver.toml option (#16) @devsetgo</li> <li>pip(deps): bump ruff from 0.7.1 to 0.7.2 (#15) @dependabot</li> <li>pip(deps): bump mkdocs-material from 9.5.40 to 9.5.43 (#11) @dependabot</li> <li>pip(deps): bump ruff from 0.6.9 to 0.7.1 (#12) @dependabot</li> <li>pip(deps): bump tox from 4.21.2 to 4.23.2 (#13) @dependabot</li> <li>pip(deps): bump pytest-cov from 5.0.0 to 6.0.0 (#14) @dependabot</li> </ul> <p>Published Date: 2024 November 08, 21:41</p>"},{"location":"release-notes/#fix-of-os-classifiers-202410204","title":"Fix of OS classifiers (2024.10.20.4)","text":""},{"location":"release-notes/#whats-changed_5","title":"What's Changed","text":"<ul> <li>Fixing Classifier Gaps (#10) @devsetgo</li> </ul> <p>Published Date: 2024 October 20, 16:14</p>"},{"location":"release-notes/#fix-of-classifiers-202410203","title":"Fix of classifiers (2024.10.20.3)","text":""},{"location":"release-notes/#whats-changed_6","title":"What's Changed","text":"<ul> <li>Updating classifiers (#9) @devsetgo</li> </ul> <p>Published Date: 2024 October 20, 16:00</p>"},{"location":"release-notes/#adding-python-39-support-20241020","title":"Adding Python 3.9 Support (2024.10.20)","text":""},{"location":"release-notes/#whats-changed_7","title":"What's Changed","text":"<ul> <li>Fix to support Python 3.9 and higher (#8) @devsetgo</li> <li>Release Ready (#7) @devsetgo</li> </ul> <p>Published Date: 2024 October 20, 15:35</p>"},{"location":"release-notes/#initial-release-20241018","title":"Initial Release (2024.10.18)","text":""},{"location":"release-notes/#whats-changed_8","title":"What's Changed","text":"<ul> <li>Initial Work by @devsetgo in https://github.com/devsetgo/bumpcalver/pull/1</li> <li>Pre-Release Work by @devsetgo in https://github.com/devsetgo/bumpcalver/pull/4</li> </ul> <p>Full Changelog: https://github.com/devsetgo/bumpcalver/commits/2024.10.18</p> <p>Published Date: 2024 October 18, 18:42</p>"},{"location":"timezones/","title":"Timezones","text":"<p>Here is a list of all timezones that can be utilized. You can search for a specific timezone by typing in the search bar.</p> <p></p> Timezone UTC Offset Africa/Abidjan UTC+00:00 Africa/Accra UTC+00:00 Africa/Addis_Ababa UTC+03:00 Africa/Algiers UTC+01:00 Africa/Asmara UTC+03:00 Africa/Asmera UTC+03:00 Africa/Bamako UTC+00:00 Africa/Bangui UTC+01:00 Africa/Banjul UTC+00:00 Africa/Bissau UTC+00:00 Africa/Blantyre UTC+02:00 Africa/Brazzaville UTC+01:00 Africa/Bujumbura UTC+02:00 Africa/Cairo UTC+03:00 Africa/Casablanca UTC+01:00 Africa/Ceuta UTC+02:00 Africa/Conakry UTC+00:00 Africa/Dakar UTC+00:00 Africa/Dar_es_Salaam UTC+03:00 Africa/Djibouti UTC+03:00 Africa/Douala UTC+01:00 Africa/El_Aaiun UTC+01:00 Africa/Freetown UTC+00:00 Africa/Gaborone UTC+02:00 Africa/Harare UTC+02:00 Africa/Johannesburg UTC+02:00 Africa/Juba UTC+02:00 Africa/Kampala UTC+03:00 Africa/Khartoum UTC+02:00 Africa/Kigali UTC+02:00 Africa/Kinshasa UTC+01:00 Africa/Lagos UTC+01:00 Africa/Libreville UTC+01:00 Africa/Lome UTC+00:00 Africa/Luanda UTC+01:00 Africa/Lubumbashi UTC+02:00 Africa/Lusaka UTC+02:00 Africa/Malabo UTC+01:00 Africa/Maputo UTC+02:00 Africa/Maseru UTC+02:00 Africa/Mbabane UTC+02:00 Africa/Mogadishu UTC+03:00 Africa/Monrovia UTC+00:00 Africa/Nairobi UTC+03:00 Africa/Ndjamena UTC+01:00 Africa/Niamey UTC+01:00 Africa/Nouakchott UTC+00:00 Africa/Ouagadougou UTC+00:00 Africa/Porto-Novo UTC+01:00 Africa/Sao_Tome UTC+00:00 Africa/Timbuktu UTC+00:00 Africa/Tripoli UTC+02:00 Africa/Tunis UTC+01:00 Africa/Windhoek UTC+02:00 America/Adak UTC-09:00 America/Anchorage UTC-08:00 America/Anguilla UTC-04:00 America/Antigua UTC-04:00 America/Araguaina UTC-03:00 America/Argentina/Buenos_Aires UTC-03:00 America/Argentina/Catamarca UTC-03:00 America/Argentina/ComodRivadavia UTC-03:00 America/Argentina/Cordoba UTC-03:00 America/Argentina/Jujuy UTC-03:00 America/Argentina/La_Rioja UTC-03:00 America/Argentina/Mendoza UTC-03:00 America/Argentina/Rio_Gallegos UTC-03:00 America/Argentina/Salta UTC-03:00 America/Argentina/San_Juan UTC-03:00 America/Argentina/San_Luis UTC-03:00 America/Argentina/Tucuman UTC-03:00 America/Argentina/Ushuaia UTC-03:00 America/Aruba UTC-04:00 America/Asuncion UTC-04:00 America/Atikokan UTC-05:00 America/Atka UTC-09:00 America/Bahia UTC-03:00 America/Bahia_Banderas UTC-06:00 America/Barbados UTC-04:00 America/Belem UTC-03:00 America/Belize UTC-06:00 America/Blanc-Sablon UTC-04:00 America/Boa_Vista UTC-04:00 America/Bogota UTC-05:00 America/Boise UTC-06:00 America/Buenos_Aires UTC-03:00 America/Cambridge_Bay UTC-06:00 America/Campo_Grande UTC-04:00 America/Cancun UTC-05:00 America/Caracas UTC-04:00 America/Catamarca UTC-03:00 America/Cayenne UTC-03:00 America/Cayman UTC-05:00 America/Chicago UTC-05:00 America/Chihuahua UTC-06:00 America/Ciudad_Juarez UTC-06:00 America/Coral_Harbour UTC-05:00 America/Cordoba UTC-03:00 America/Costa_Rica UTC-06:00 America/Creston UTC-07:00 America/Cuiaba UTC-04:00 America/Curacao UTC-04:00 America/Danmarkshavn UTC+00:00 America/Dawson UTC-07:00 America/Dawson_Creek UTC-07:00 America/Denver UTC-06:00 America/Detroit UTC-04:00 America/Dominica UTC-04:00 America/Edmonton UTC-06:00 America/Eirunepe UTC-05:00 America/El_Salvador UTC-06:00 America/Ensenada UTC-07:00 America/Fort_Nelson UTC-07:00 America/Fort_Wayne UTC-04:00 America/Fortaleza UTC-03:00 America/Glace_Bay UTC-03:00 America/Godthab UTC-01:00 America/Goose_Bay UTC-03:00 America/Grand_Turk UTC-04:00 America/Grenada UTC-04:00 America/Guadeloupe UTC-04:00 America/Guatemala UTC-06:00 America/Guayaquil UTC-05:00 America/Guyana UTC-04:00 America/Halifax UTC-03:00 America/Havana UTC-04:00 America/Hermosillo UTC-07:00 America/Indiana/Indianapolis UTC-04:00 America/Indiana/Knox UTC-05:00 America/Indiana/Marengo UTC-04:00 America/Indiana/Petersburg UTC-04:00 America/Indiana/Tell_City UTC-05:00 America/Indiana/Vevay UTC-04:00 America/Indiana/Vincennes UTC-04:00 America/Indiana/Winamac UTC-04:00 America/Indianapolis UTC-04:00 America/Inuvik UTC-06:00 America/Iqaluit UTC-04:00 America/Jamaica UTC-05:00 America/Jujuy UTC-03:00 America/Juneau UTC-08:00 America/Kentucky/Louisville UTC-04:00 America/Kentucky/Monticello UTC-04:00 America/Knox_IN UTC-05:00 America/Kralendijk UTC-04:00 America/La_Paz UTC-04:00 America/Lima UTC-05:00 America/Los_Angeles UTC-07:00 America/Louisville UTC-04:00 America/Lower_Princes UTC-04:00 America/Maceio UTC-03:00 America/Managua UTC-06:00 America/Manaus UTC-04:00 America/Marigot UTC-04:00 America/Martinique UTC-04:00 America/Matamoros UTC-05:00 America/Mazatlan UTC-07:00 America/Mendoza UTC-03:00 America/Menominee UTC-05:00 America/Merida UTC-06:00 America/Metlakatla UTC-08:00 America/Mexico_City UTC-06:00 America/Miquelon UTC-02:00 America/Moncton UTC-03:00 America/Monterrey UTC-06:00 America/Montevideo UTC-03:00 America/Montreal UTC-04:00 America/Montserrat UTC-04:00 America/Nassau UTC-04:00 America/New_York UTC-04:00 America/Nipigon UTC-04:00 America/Nome UTC-08:00 America/Noronha UTC-02:00 America/North_Dakota/Beulah UTC-05:00 America/North_Dakota/Center UTC-05:00 America/North_Dakota/New_Salem UTC-05:00 America/Nuuk UTC-01:00 America/Ojinaga UTC-05:00 America/Panama UTC-05:00 America/Pangnirtung UTC-04:00 America/Paramaribo UTC-03:00 America/Phoenix UTC-07:00 America/Port-au-Prince UTC-04:00 America/Port_of_Spain UTC-04:00 America/Porto_Acre UTC-05:00 America/Porto_Velho UTC-04:00 America/Puerto_Rico UTC-04:00 America/Punta_Arenas UTC-03:00 America/Rainy_River UTC-05:00 America/Rankin_Inlet UTC-05:00 America/Recife UTC-03:00 America/Regina UTC-06:00 America/Resolute UTC-05:00 America/Rio_Branco UTC-05:00 America/Rosario UTC-03:00 America/Santa_Isabel UTC-07:00 America/Santarem UTC-03:00 America/Santiago UTC-03:00 America/Santo_Domingo UTC-04:00 America/Sao_Paulo UTC-03:00 America/Scoresbysund UTC-01:00 America/Shiprock UTC-06:00 America/Sitka UTC-08:00 America/St_Barthelemy UTC-04:00 America/St_Johns UTC-02:30 America/St_Kitts UTC-04:00 America/St_Lucia UTC-04:00 America/St_Thomas UTC-04:00 America/St_Vincent UTC-04:00 America/Swift_Current UTC-06:00 America/Tegucigalpa UTC-06:00 America/Thule UTC-03:00 America/Thunder_Bay UTC-04:00 America/Tijuana UTC-07:00 America/Toronto UTC-04:00 America/Tortola UTC-04:00 America/Vancouver UTC-07:00 America/Virgin UTC-04:00 America/Whitehorse UTC-07:00 America/Winnipeg UTC-05:00 America/Yakutat UTC-08:00 America/Yellowknife UTC-06:00 Antarctica/Casey UTC+08:00 Antarctica/Davis UTC+07:00 Antarctica/DumontDUrville UTC+10:00 Antarctica/Macquarie UTC+10:00 Antarctica/Mawson UTC+05:00 Antarctica/McMurdo UTC+13:00 Antarctica/Palmer UTC-03:00 Antarctica/Rothera UTC-03:00 Antarctica/South_Pole UTC+13:00 Antarctica/Syowa UTC+03:00 Antarctica/Troll UTC+02:00 Antarctica/Vostok UTC+05:00 Arctic/Longyearbyen UTC+02:00 Asia/Aden UTC+03:00 Asia/Almaty UTC+05:00 Asia/Amman UTC+03:00 Asia/Anadyr UTC+12:00 Asia/Aqtau UTC+05:00 Asia/Aqtobe UTC+05:00 Asia/Ashgabat UTC+05:00 Asia/Ashkhabad UTC+05:00 Asia/Atyrau UTC+05:00 Asia/Baghdad UTC+03:00 Asia/Bahrain UTC+03:00 Asia/Baku UTC+04:00 Asia/Bangkok UTC+07:00 Asia/Barnaul UTC+07:00 Asia/Beirut UTC+03:00 Asia/Bishkek UTC+06:00 Asia/Brunei UTC+08:00 Asia/Calcutta UTC+05:30 Asia/Chita UTC+09:00 Asia/Choibalsan UTC+08:00 Asia/Chongqing UTC+08:00 Asia/Chungking UTC+08:00 Asia/Colombo UTC+05:30 Asia/Dacca UTC+06:00 Asia/Damascus UTC+03:00 Asia/Dhaka UTC+06:00 Asia/Dili UTC+09:00 Asia/Dubai UTC+04:00 Asia/Dushanbe UTC+05:00 Asia/Famagusta UTC+03:00 Asia/Gaza UTC+03:00 Asia/Harbin UTC+08:00 Asia/Hebron UTC+03:00 Asia/Ho_Chi_Minh UTC+07:00 Asia/Hong_Kong UTC+08:00 Asia/Hovd UTC+07:00 Asia/Irkutsk UTC+08:00 Asia/Istanbul UTC+03:00 Asia/Jakarta UTC+07:00 Asia/Jayapura UTC+09:00 Asia/Jerusalem UTC+03:00 Asia/Kabul UTC+04:30 Asia/Kamchatka UTC+12:00 Asia/Karachi UTC+05:00 Asia/Kashgar UTC+06:00 Asia/Kathmandu UTC+05:45 Asia/Katmandu UTC+05:45 Asia/Khandyga UTC+09:00 Asia/Kolkata UTC+05:30 Asia/Krasnoyarsk UTC+07:00 Asia/Kuala_Lumpur UTC+08:00 Asia/Kuching UTC+08:00 Asia/Kuwait UTC+03:00 Asia/Macao UTC+08:00 Asia/Macau UTC+08:00 Asia/Magadan UTC+11:00 Asia/Makassar UTC+08:00 Asia/Manila UTC+08:00 Asia/Muscat UTC+04:00 Asia/Nicosia UTC+03:00 Asia/Novokuznetsk UTC+07:00 Asia/Novosibirsk UTC+07:00 Asia/Omsk UTC+06:00 Asia/Oral UTC+05:00 Asia/Phnom_Penh UTC+07:00 Asia/Pontianak UTC+07:00 Asia/Pyongyang UTC+09:00 Asia/Qatar UTC+03:00 Asia/Qostanay UTC+05:00 Asia/Qyzylorda UTC+05:00 Asia/Rangoon UTC+06:30 Asia/Riyadh UTC+03:00 Asia/Saigon UTC+07:00 Asia/Sakhalin UTC+11:00 Asia/Samarkand UTC+05:00 Asia/Seoul UTC+09:00 Asia/Shanghai UTC+08:00 Asia/Singapore UTC+08:00 Asia/Srednekolymsk UTC+11:00 Asia/Taipei UTC+08:00 Asia/Tashkent UTC+05:00 Asia/Tbilisi UTC+04:00 Asia/Tehran UTC+03:30 Asia/Tel_Aviv UTC+03:00 Asia/Thimbu UTC+06:00 Asia/Thimphu UTC+06:00 Asia/Tokyo UTC+09:00 Asia/Tomsk UTC+07:00 Asia/Ujung_Pandang UTC+08:00 Asia/Ulaanbaatar UTC+08:00 Asia/Ulan_Bator UTC+08:00 Asia/Urumqi UTC+06:00 Asia/Ust-Nera UTC+10:00 Asia/Vientiane UTC+07:00 Asia/Vladivostok UTC+10:00 Asia/Yakutsk UTC+09:00 Asia/Yangon UTC+06:30 Asia/Yekaterinburg UTC+05:00 Asia/Yerevan UTC+04:00 Atlantic/Azores UTC+00:00 Atlantic/Bermuda UTC-03:00 Atlantic/Canary UTC+01:00 Atlantic/Cape_Verde UTC-01:00 Atlantic/Faeroe UTC+01:00 Atlantic/Faroe UTC+01:00 Atlantic/Jan_Mayen UTC+02:00 Atlantic/Madeira UTC+01:00 Atlantic/Reykjavik UTC+00:00 Atlantic/South_Georgia UTC-02:00 Atlantic/St_Helena UTC+00:00 Atlantic/Stanley UTC-03:00 Australia/ACT UTC+10:00 Australia/Adelaide UTC+09:30 Australia/Brisbane UTC+10:00 Australia/Broken_Hill UTC+09:30 Australia/Canberra UTC+10:00 Australia/Currie UTC+10:00 Australia/Darwin UTC+09:30 Australia/Eucla UTC+08:45 Australia/Hobart UTC+10:00 Australia/LHI UTC+10:30 Australia/Lindeman UTC+10:00 Australia/Lord_Howe UTC+10:30 Australia/Melbourne UTC+10:00 Australia/NSW UTC+10:00 Australia/North UTC+09:30 Australia/Perth UTC+08:00 Australia/Queensland UTC+10:00 Australia/South UTC+09:30 Australia/Sydney UTC+10:00 Australia/Tasmania UTC+10:00 Australia/Victoria UTC+10:00 Australia/West UTC+08:00 Australia/Yancowinna UTC+09:30 Brazil/Acre UTC-05:00 Brazil/DeNoronha UTC-02:00 Brazil/East UTC-03:00 Brazil/West UTC-04:00 CET UTC+02:00 CST6CDT UTC-05:00 Canada/Atlantic UTC-03:00 Canada/Central UTC-05:00 Canada/Eastern UTC-04:00 Canada/Mountain UTC-06:00 Canada/Newfoundland UTC-02:30 Canada/Pacific UTC-07:00 Canada/Saskatchewan UTC-06:00 Canada/Yukon UTC-07:00 Chile/Continental UTC-03:00 Chile/EasterIsland UTC-05:00 Cuba UTC-04:00 EET UTC+03:00 EST UTC-05:00 EST5EDT UTC-04:00 Egypt UTC+03:00 Eire UTC+01:00 Etc/GMT UTC+00:00 Etc/GMT+0 UTC+00:00 Etc/GMT+1 UTC-01:00 Etc/GMT+10 UTC-10:00 Etc/GMT+11 UTC-11:00 Etc/GMT+12 UTC-12:00 Etc/GMT+2 UTC-02:00 Etc/GMT+3 UTC-03:00 Etc/GMT+4 UTC-04:00 Etc/GMT+5 UTC-05:00 Etc/GMT+6 UTC-06:00 Etc/GMT+7 UTC-07:00 Etc/GMT+8 UTC-08:00 Etc/GMT+9 UTC-09:00 Etc/GMT-0 UTC+00:00 Etc/GMT-1 UTC+01:00 Etc/GMT-10 UTC+10:00 Etc/GMT-11 UTC+11:00 Etc/GMT-12 UTC+12:00 Etc/GMT-13 UTC+13:00 Etc/GMT-14 UTC+14:00 Etc/GMT-2 UTC+02:00 Etc/GMT-3 UTC+03:00 Etc/GMT-4 UTC+04:00 Etc/GMT-5 UTC+05:00 Etc/GMT-6 UTC+06:00 Etc/GMT-7 UTC+07:00 Etc/GMT-8 UTC+08:00 Etc/GMT-9 UTC+09:00 Etc/GMT0 UTC+00:00 Etc/Greenwich UTC+00:00 Etc/UCT UTC+00:00 Etc/UTC UTC+00:00 Etc/Universal UTC+00:00 Etc/Zulu UTC+00:00 Europe/Amsterdam UTC+02:00 Europe/Andorra UTC+02:00 Europe/Astrakhan UTC+04:00 Europe/Athens UTC+03:00 Europe/Belfast UTC+01:00 Europe/Belgrade UTC+02:00 Europe/Berlin UTC+02:00 Europe/Bratislava UTC+02:00 Europe/Brussels UTC+02:00 Europe/Bucharest UTC+03:00 Europe/Budapest UTC+02:00 Europe/Busingen UTC+02:00 Europe/Chisinau UTC+03:00 Europe/Copenhagen UTC+02:00 Europe/Dublin UTC+01:00 Europe/Gibraltar UTC+02:00 Europe/Guernsey UTC+01:00 Europe/Helsinki UTC+03:00 Europe/Isle_of_Man UTC+01:00 Europe/Istanbul UTC+03:00 Europe/Jersey UTC+01:00 Europe/Kaliningrad UTC+02:00 Europe/Kiev UTC+03:00 Europe/Kirov UTC+03:00 Europe/Kyiv UTC+03:00 Europe/Lisbon UTC+01:00 Europe/Ljubljana UTC+02:00 Europe/London UTC+01:00 Europe/Luxembourg UTC+02:00 Europe/Madrid UTC+02:00 Europe/Malta UTC+02:00 Europe/Mariehamn UTC+03:00 Europe/Minsk UTC+03:00 Europe/Monaco UTC+02:00 Europe/Moscow UTC+03:00 Europe/Nicosia UTC+03:00 Europe/Oslo UTC+02:00 Europe/Paris UTC+02:00 Europe/Podgorica UTC+02:00 Europe/Prague UTC+02:00 Europe/Riga UTC+03:00 Europe/Rome UTC+02:00 Europe/Samara UTC+04:00 Europe/San_Marino UTC+02:00 Europe/Sarajevo UTC+02:00 Europe/Saratov UTC+04:00 Europe/Simferopol UTC+03:00 Europe/Skopje UTC+02:00 Europe/Sofia UTC+03:00 Europe/Stockholm UTC+02:00 Europe/Tallinn UTC+03:00 Europe/Tirane UTC+02:00 Europe/Tiraspol UTC+03:00 Europe/Ulyanovsk UTC+04:00 Europe/Uzhgorod UTC+03:00 Europe/Vaduz UTC+02:00 Europe/Vatican UTC+02:00 Europe/Vienna UTC+02:00 Europe/Vilnius UTC+03:00 Europe/Volgograd UTC+03:00 Europe/Warsaw UTC+02:00 Europe/Zagreb UTC+02:00 Europe/Zaporozhye UTC+03:00 Europe/Zurich UTC+02:00 Factory UTC+00:00 GB UTC+01:00 GB-Eire UTC+01:00 GMT UTC+00:00 GMT+0 UTC+00:00 GMT-0 UTC+00:00 GMT0 UTC+00:00 Greenwich UTC+00:00 HST UTC-10:00 Hongkong UTC+08:00 Iceland UTC+00:00 Indian/Antananarivo UTC+03:00 Indian/Chagos UTC+06:00 Indian/Christmas UTC+07:00 Indian/Cocos UTC+06:30 Indian/Comoro UTC+03:00 Indian/Kerguelen UTC+05:00 Indian/Mahe UTC+04:00 Indian/Maldives UTC+05:00 Indian/Mauritius UTC+04:00 Indian/Mayotte UTC+03:00 Indian/Reunion UTC+04:00 Iran UTC+03:30 Israel UTC+03:00 Jamaica UTC-05:00 Japan UTC+09:00 Kwajalein UTC+12:00 Libya UTC+02:00 MET UTC+02:00 MST UTC-07:00 MST7MDT UTC-06:00 Mexico/BajaNorte UTC-07:00 Mexico/BajaSur UTC-07:00 Mexico/General UTC-06:00 NZ UTC+13:00 NZ-CHAT UTC+13:45 Navajo UTC-06:00 PRC UTC+08:00 PST8PDT UTC-07:00 Pacific/Apia UTC+13:00 Pacific/Auckland UTC+13:00 Pacific/Bougainville UTC+11:00 Pacific/Chatham UTC+13:45 Pacific/Chuuk UTC+10:00 Pacific/Easter UTC-05:00 Pacific/Efate UTC+11:00 Pacific/Enderbury UTC+13:00 Pacific/Fakaofo UTC+13:00 Pacific/Fiji UTC+12:00 Pacific/Funafuti UTC+12:00 Pacific/Galapagos UTC-06:00 Pacific/Gambier UTC-09:00 Pacific/Guadalcanal UTC+11:00 Pacific/Guam UTC+10:00 Pacific/Honolulu UTC-10:00 Pacific/Johnston UTC-10:00 Pacific/Kanton UTC+13:00 Pacific/Kiritimati UTC+14:00 Pacific/Kosrae UTC+11:00 Pacific/Kwajalein UTC+12:00 Pacific/Majuro UTC+12:00 Pacific/Marquesas UTC-09:30 Pacific/Midway UTC-11:00 Pacific/Nauru UTC+12:00 Pacific/Niue UTC-11:00 Pacific/Norfolk UTC+11:00 Pacific/Noumea UTC+11:00 Pacific/Pago_Pago UTC-11:00 Pacific/Palau UTC+09:00 Pacific/Pitcairn UTC-08:00 Pacific/Pohnpei UTC+11:00 Pacific/Ponape UTC+11:00 Pacific/Port_Moresby UTC+10:00 Pacific/Rarotonga UTC-10:00 Pacific/Saipan UTC+10:00 Pacific/Samoa UTC-11:00 Pacific/Tahiti UTC-10:00 Pacific/Tarawa UTC+12:00 Pacific/Tongatapu UTC+13:00 Pacific/Truk UTC+10:00 Pacific/Wake UTC+12:00 Pacific/Wallis UTC+12:00 Pacific/Yap UTC+10:00 Poland UTC+02:00 Portugal UTC+01:00 ROC UTC+08:00 ROK UTC+09:00 Singapore UTC+08:00 Turkey UTC+03:00 UCT UTC+00:00 US/Alaska UTC-08:00 US/Aleutian UTC-09:00 US/Arizona UTC-07:00 US/Central UTC-05:00 US/East-Indiana UTC-04:00 US/Eastern UTC-04:00 US/Hawaii UTC-10:00 US/Indiana-Starke UTC-05:00 US/Michigan UTC-04:00 US/Mountain UTC-06:00 US/Pacific UTC-07:00 US/Samoa UTC-11:00 UTC UTC+00:00 Universal UTC+00:00 W-SU UTC+03:00 WET UTC+01:00 Zulu UTC+00:00 localtime UTC+00:00"},{"location":"timezones/#code-used-for-generating-the-table","title":"Code Used for Generating the Table","text":"<p>Run this code in a Python environment to generate the table above.</p> <pre><code>from datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo, available_timezones\n\n# Prepare a list to store time zone information\ntimezones = []\n\nfor tz_name in sorted(available_timezones()):\n    tz = ZoneInfo(tz_name)\n    now = datetime.now(tz)\n    offset = tz.utcoffset(now)\n\n    if offset is None:\n        offset_str = 'Unknown'\n    else:\n        total_seconds = offset.total_seconds()\n        sign = '+' if total_seconds &gt;= 0 else '-'\n        total_seconds = abs(total_seconds)\n        hours, remainder = divmod(total_seconds, 3600)\n        minutes, _ = divmod(remainder, 60)\n        offset_str = f\"UTC{sign}{int(hours):02d}:{int(minutes):02d}\"\n\n    timezones.append((tz_name, offset_str))\n\n# Generate Markdown table\nprint(\"| Timezone | UTC Offset |\")\nprint(\"| --- | --- |\")\nfor tz_name, offset_str in timezones:\n    print(f\"| {tz_name} | {offset_str} |\")\n</code></pre>"},{"location":"versioning/","title":"Documentation Versioning with Mike","text":"<p>This project uses mike to manage multiple versions of the documentation. Mike integrates with MkDocs to provide a smooth versioning experience.</p>"},{"location":"versioning/#overview","title":"Overview","text":"<p>The documentation versioning system allows you to: - Deploy multiple versions of documentation simultaneously - Automatically manage version aliases (latest, stable, dev) - Provide a version selector in the documentation - Maintain clean URLs for different versions</p>"},{"location":"versioning/#version-strategy","title":"Version Strategy","text":""},{"location":"versioning/#version-formats","title":"Version Formats","text":"<ul> <li>Release versions: Use calendar versioning format (e.g., <code>2025.08.01</code>)</li> <li>Development version: <code>dev</code></li> <li>Aliases: <code>latest</code>, <code>stable</code></li> </ul>"},{"location":"versioning/#version-hierarchy","title":"Version Hierarchy","text":"<ol> <li><code>latest</code> - Always points to the most recent release</li> <li><code>stable</code> - Points to the current stable release</li> <li><code>dev</code> - Development/bleeding-edge documentation</li> <li>Specific versions (e.g., <code>2025.08.01</code>, <code>2025.07.15</code>)</li> </ol>"},{"location":"versioning/#commands","title":"Commands","text":""},{"location":"versioning/#deployment-commands","title":"Deployment Commands","text":"<pre><code># Deploy current version (auto-detected from project files)\nmake create-docs\n\n# Deploy locally without pushing to remote\nmake create-docs-local\n\n# Deploy development version\nmake create-docs-dev\n\n# Deploy specific version with custom aliases\npython3 scripts/deploy_docs.py deploy --version 2025.08.01 --aliases latest stable --push\n\n# Deploy development version\npython3 scripts/deploy_docs.py deploy --dev --version dev --push\n</code></pre>"},{"location":"versioning/#management-commands","title":"Management Commands","text":"<pre><code># List all deployed versions\nmake list-docs\n# or\npython3 scripts/deploy_docs.py list\n\n# Serve all versions locally for testing\nmake serve-docs\n# or\npython3 scripts/deploy_docs.py serve\n\n# Delete a specific version\nmake delete-version VERSION=2025.07.01\n# or\npython3 scripts/deploy_docs.py delete --version 2025.07.01 --push\n\n# Set default version (what users see at the root URL)\nmake set-default-version VERSION=latest\n</code></pre>"},{"location":"versioning/#workflow-integration","title":"Workflow Integration","text":""},{"location":"versioning/#automated-deployment","title":"Automated Deployment","text":"<p>The project includes GitHub Actions workflows that automatically deploy documentation:</p> <ol> <li>Push to <code>dev</code> branch: Deploys to <code>dev</code> version</li> <li>Push to <code>main</code>/<code>master</code> branch: Deploys as new release with <code>latest</code> alias</li> <li>Tagged releases: Deploys with both <code>latest</code> and <code>stable</code> aliases</li> </ol>"},{"location":"versioning/#manual-deployment","title":"Manual Deployment","text":"<p>For manual deployment, follow these steps:</p> <ol> <li> <p>Update version: Use bumpcalver to update project version    <pre><code>bumpcalver --build\n</code></pre></p> </li> <li> <p>Deploy documentation:     <pre><code>make create-docs\n</code></pre></p> </li> </ol>"},{"location":"versioning/#configuration","title":"Configuration","text":""},{"location":"versioning/#mkdocs-configuration","title":"MkDocs Configuration","text":"<p>The <code>mkdocs.yml</code> file includes the mike plugin configuration:</p> <pre><code>plugins:\n  - mike:\n      alias_type: symlink\n      version_selector: true\n      css_dir: css\n      javascript_dir: js\n</code></pre>"},{"location":"versioning/#mike-configuration","title":"Mike Configuration","text":"<p>Project-specific mike settings are stored in <code>.mike.yml</code>:</p> <pre><code>remote_branch: gh-pages\nremote_name: origin\nversion_selector: true\ndefault_alias_type: symlink\n</code></pre>"},{"location":"versioning/#version-selector","title":"Version Selector","text":"<p>The documentation includes an automatic version selector that: - Appears in the navigation bar - Shows all available versions - Allows users to switch between versions - Highlights the current version</p>"},{"location":"versioning/#best-practices","title":"Best Practices","text":""},{"location":"versioning/#version-management","title":"Version Management","text":"<ol> <li>Always use aliases: Use <code>latest</code> and <code>stable</code> aliases for user-friendly URLs</li> <li>Regular cleanup: Remove old versions that are no longer supported</li> <li>Consistent naming: Follow the established version naming convention</li> <li>Test locally: Use <code>make serve-docs</code> to test before deploying</li> </ol>"},{"location":"versioning/#release-process","title":"Release Process","text":"<ol> <li>Development: Work on <code>dev</code> branch, deploy to <code>dev</code> version</li> <li>Review: Test documentation thoroughly using local serving</li> <li>Release: Merge to main, automatic deployment creates new versioned docs</li> <li>Tag: Create Git tags for major releases to create permanent documentation snapshots</li> </ol>"},{"location":"versioning/#url-structure","title":"URL Structure","text":"<p>The documentation will be available at: - <code>https://yoursite.com/</code> - Default version (usually <code>latest</code>) - <code>https://yoursite.com/latest/</code> - Latest release - <code>https://yoursite.com/stable/</code> - Stable release - <code>https://yoursite.com/dev/</code> - Development version - <code>https://yoursite.com/2025.08.01/</code> - Specific version</p>"},{"location":"versioning/#troubleshooting","title":"Troubleshooting","text":""},{"location":"versioning/#common-issues","title":"Common Issues","text":"<ol> <li>Version not found: Ensure the version exists with <code>make list-docs</code></li> <li>Git permissions: Configure Git user for automated deployments</li> <li>Branch conflicts: Fetch latest changes before deploying</li> </ol>"},{"location":"versioning/#recovery","title":"Recovery","text":"<p>If something goes wrong:</p> <pre><code># List all versions to see current state\nmake list-docs\n\n# Delete problematic version\nmake delete-version VERSION=problematic-version\n\n# Redeploy from scratch\nmake create-docs-local\n</code></pre>"},{"location":"versioning/#integration-with-bumpcalver","title":"Integration with BumpCalver","text":"<p>The versioning system integrates seamlessly with BumpCalver:</p> <ol> <li>Version detection: Automatically reads version from project files</li> <li>Consistent versioning: Uses the same version format across project and docs</li> <li>Automated workflow: Version bumps trigger documentation updates</li> </ol> <p>This ensures that documentation versions always match the project versions.</p>"},{"location":"archive/index2/","title":"Index2","text":"<p>Support Python Versions</p> <p> </p> <p>CI/CD Pipeline:</p> <p> </p> <p>SonarCloud:</p> <p> </p>"},{"location":"archive/index2/#bumpcalver-cli-documentation","title":"BumpCalver CLI Documentation","text":""},{"location":"archive/index2/#overview","title":"Overview","text":"<p>The BumpCalver CLI is a command-line interface for calendar-based version bumping. It automates the process of updating version strings in your project's files based on the current date and build count. Additionally, it can create Git tags and commit changes automatically. The CLI is highly configurable via a <code>pyproject.toml</code> file and supports various customization options to fit your project's needs.</p>"},{"location":"archive/index2/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Getting Started</li> <li>Configuration</li> <li>Example Configuration</li> <li>Command-Line Usage</li> <li>Options</li> <li>Examples</li> </ul>"},{"location":"archive/index2/#installation","title":"Installation","text":"<p>To install the BumpCalver CLI, you can add it to your project's dependencies. If it's packaged as a Python module, you might install it via:</p> <pre><code>pip install bumpcalver\n</code></pre> <p>Note: Replace the installation command with the actual method based on how the package is distributed.</p>"},{"location":"archive/index2/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Configure Your Project: Create or update the <code>pyproject.toml</code> file in your project's root directory to include the <code>[tool.bumpcalver]</code> section with your desired settings.</p> </li> <li> <p>Run the CLI: Use the <code>bumpcalver</code> command with appropriate options to bump your project's version.</p> </li> </ol> <p>Example:</p> <pre><code>bumpcalver --build --git-tag --auto-commit\n</code></pre>"},{"location":"archive/index2/#configuration","title":"Configuration","text":"<p>The BumpCalver CLI relies on a <code>pyproject.toml</code> configuration file located at the root of your project. This file specifies how versioning should be handled, which files to update, and other settings.</p>"},{"location":"archive/index2/#configuration-options","title":"Configuration Options","text":"<ul> <li><code>version_format</code> (string): Format string for the version. Should include <code>{current_date}</code> and <code>{build_count}</code> placeholders.</li> <li><code>timezone</code> (string): Timezone for date calculations (e.g., <code>UTC</code>, <code>America/New_York</code>).</li> <li><code>file</code> (list of tables): Specifies which files to update and how to find the version string.</li> <li><code>path</code> (string): Path to the file to be updated.</li> <li><code>variable</code> (string, optional): The variable name that holds the version string in the file.</li> <li><code>pattern</code> (string, optional): A regex pattern to find the version string.</li> <li><code>git_tag</code> (boolean): Whether to create a Git tag with the new version.</li> <li><code>auto_commit</code> (boolean): Whether to automatically commit changes when creating a Git tag.</li> </ul>"},{"location":"archive/index2/#example-configuration","title":"Example Configuration","text":"<pre><code>[tool.bumpcalver]\nversion_format = \"{current_date}-{build_count:03}\"\ntimezone = \"UTC\"\ngit_tag = true\nauto_commit = true\n\n[[tool.bumpcalver.file]]\npath = \"version.py\"\nvariable = \"__version__\"\n</code></pre>"},{"location":"archive/index2/#command-line-usage","title":"Command-Line Usage","text":"<p>The CLI provides several options to customize the version bumping process.</p> <pre><code>Usage: bumpcalver [OPTIONS]\n\nOptions:\n  --beta                      Use beta versioning.\n  --build                     Use build count versioning.\n  --timezone TEXT             Timezone for date calculations (default: value\n                              from config or America/New_York).\n  --git-tag / --no-git-tag    Create a Git tag with the new version.\n  --auto-commit / --no-auto-commit\n                              Automatically commit changes when creating a Git\n                              tag.\n  --help                      Show this message and exit.\n</code></pre>"},{"location":"archive/index2/#options","title":"Options","text":"<ul> <li><code>--beta</code>: Prefixes the version with <code>beta-</code>.</li> <li><code>--build</code>: Increments the build count based on the current date.</li> <li><code>--timezone</code>: Overrides the timezone specified in the configuration.</li> <li><code>--git-tag</code> / <code>--no-git-tag</code>: Forces Git tagging on or off, overriding the configuration.</li> <li><code>--auto-commit</code> / <code>--no-auto-commit</code>: Forces auto-commit on or off, overriding the configuration.</li> </ul>"},{"location":"archive/index2/#examples","title":"Examples","text":""},{"location":"archive/index2/#basic-version-bump","title":"Basic Version Bump","text":"<p>To bump the version using the current date and build count:</p> <pre><code>bumpcalver --build\n</code></pre>"},{"location":"archive/index2/#beta-versioning","title":"Beta Versioning","text":"<p>To create a beta version:</p> <pre><code>bumpcalver --build --beta\n</code></pre>"},{"location":"archive/index2/#specifying-timezone","title":"Specifying Timezone","text":"<p>To use a specific timezone:</p> <pre><code>bumpcalver --build --timezone Europe/London\n</code></pre>"},{"location":"archive/index2/#creating-a-git-tag-with-auto-commit","title":"Creating a Git Tag with Auto-Commit","text":"<p>To bump the version, commit changes, and create a Git tag:</p> <pre><code>bumpcalver --build --git-tag --auto-commit\n</code></pre>"},{"location":"archive/index2/#error-handling","title":"Error Handling","text":"<ul> <li> <p>Unknown Timezone: If an invalid timezone is specified, the default timezone (<code>America/New_York</code>) is used, and a warning is printed.</p> </li> <li> <p>File Not Found: If a specified file is not found during version update, an error message is printed.</p> </li> <li> <p>Invalid Build Count: If the existing build count in a file is invalid, it resets to <code>1</code>, and a warning is printed.</p> </li> <li> <p>Git Errors: Errors during Git operations are caught, and an error message is displayed.</p> </li> <li> <p>Malformed Configuration: If the <code>pyproject.toml</code> file is malformed, an error is printed, and the program exits.</p> </li> </ul>"},{"location":"archive/index2/#support","title":"Support","text":"<p>For issues or questions, please open an issue on the project's repository.</p>"},{"location":"archive/quickstart2/","title":"Quick Start","text":""},{"location":"archive/quickstart2/#install","title":"Install","text":"<pre><code>pip install bumpcalver\n</code></pre>"},{"location":"archive/quickstart2/#usage","title":"Usage","text":""},{"location":"archive/quickstart2/#initialize-configuration","title":"Initialize Configuration","text":"<p>Create a <code>pyproject.toml</code> file in your project's root directory with the following content:</p> <pre><code>[tool.bumpcalver]\nversion_format = \"{current_date}-{build_count:03}\"\ntimezone = \"UTC\"\ngit_tag = true\nauto_commit = true\n\n[[tool.bumpcalver.file]]\npath = \"version.py\"\nvariable = \"__version__\"\n\n[[tool.bumpcalver.file]]\npath = \"src/module_name/__init__.py\"\nvariable = \"__version__\"\n</code></pre> <p>This configuration tells BumpCalver how to format your version strings, which timezone to use, and which files to update.</p>"},{"location":"archive/quickstart2/#basic-version-bump","title":"Basic Version Bump","text":"<p>To bump the version using the current date and build count:</p> <pre><code>bumpcalver --build\n</code></pre> <p>This command will:</p> <ul> <li>Increment the build count for the current date.</li> <li>Update the <code>__version__</code> variable in <code>version.py</code>.</li> <li>Use the timezone specified in your configuration (<code>UTC</code> in this case).</li> </ul>"},{"location":"archive/quickstart2/#beta-versioning","title":"Beta Versioning","text":"<p>To create a beta version:</p> <pre><code>bumpcalver --build --beta\n</code></pre> <p>This will prefix your version with <code>beta-</code>, resulting in a version like <code>beta-2023-10-05-001</code>.</p>"},{"location":"archive/quickstart2/#specify-timezone","title":"Specify Timezone","text":"<p>To use a specific timezone (overriding the configuration):</p> <pre><code>bumpcalver --build --timezone Europe/London\n</code></pre>"},{"location":"archive/quickstart2/#create-a-git-tag-with-auto-commit","title":"Create a Git Tag with Auto-Commit","text":"<p>To bump the version, commit changes, and create a Git tag:</p> <pre><code>bumpcalver --build --git-tag --auto-commit\n</code></pre> <p>This command will:</p> <ul> <li>Update the version as before.</li> <li>Commit the changes to Git.</li> <li>Create a Git tag with the new version.</li> </ul>"},{"location":"archive/quickstart2/#additional-options","title":"Additional Options","text":"<ul> <li>Disable Git Tagging:</li> </ul> <pre><code>bumpcalver --build --no-git-tag\n</code></pre> <ul> <li>Disable Auto-Commit:</li> </ul> <pre><code>bumpcalver --build --no-auto-commit\n</code></pre>"},{"location":"archive/quickstart2/#see-documentation","title":"See Documentation","text":"<p>For more examples and advanced usage, please refer to the full documentation or visit the project's repository.</p> <p>Note: Replace <code>#</code> with the actual link to your documentation or repository.</p>"},{"location":"archive/quickstart2/#example-versionpy-file","title":"Example <code>version.py</code> File","text":"<p>Ensure that your <code>version.py</code> file (or the file specified in your configuration) contains the version variable:</p> <pre><code>__version__ = \"0.1.0\"\n</code></pre> <p>After running <code>bumpcalver --build</code>, it will be updated to:</p> <pre><code>__version__ = \"2023-10-05-001\"\n</code></pre>"},{"location":"archive/quickstart2/#integrate-with-your-project","title":"Integrate with Your Project","text":"<p>You can import the version into your application as needed:</p> <pre><code>from version import __version__\n\nprint(f\"Current version: {__version__}\")\n</code></pre>"},{"location":"archive/quickstart2/#summary","title":"Summary","text":"<p>With BumpCalver, you can automate version management based on the calendar date and build counts, ensuring consistent and meaningful version numbers across your project.</p> <p>For any issues or contributions, please visit the project repository or contact support.</p> <p>Note: Replace placeholders with actual URLs or email addresses relevant to your project.</p>"},{"location":"examples/configuration/","title":"Library Configuration Examples","text":"<p>Pyproject.toml is the preferred method, but there is an example for the bumpcalver.toml configuration included also.</p>"},{"location":"examples/configuration/#pyprojecttoml","title":"PyProject.TOML","text":"<p>Add to your pyproject.toml</p> <pre><code>[project]\nname = \"example PyProject.toml\"\nversion = \"2025.2.2\"\nrequires-python = \"&gt;=3.10\"\ndescription = \"A powerful CLI tool for effortless calendar-based version management\"\nkeywords = [ \"cli\", \"tool\", \"calendar\", \"version\", \"management\", \"configuration\", \"example\",]\nreadme = \"README.md\"\n\n[project.license]\nfile = \"LICENSE\"\n\n[tool.bumpcalver]\nversion_format = \"{current_date}-{build_count:03}\"\ndate_format = \"%y.%m.%d\"\ntimezone = \"America/New_York\"\ngit_tag = true\nauto_commit = true\n[[tool.bumpcalver.file]]\npath = \"pyproject.toml\"\nfile_type = \"toml\"\nvariable = \"project.version\"\nversion_standard = \"python\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/makefile\"\nfile_type = \"makefile\"\nvariable = \"APP_VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/dockerfile\"\nfile_type = \"dockerfile\"\nvariable = \"arg.VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/dockerfile\"\nfile_type = \"dockerfile\"\nvariable = \"env.APP_VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"examples/p.py\"\nfile_type = \"python\"\nvariable = \"__version__\"\nversion_standard = \"python\"\n\n[[tool.bumpcalver.file]]\npath = \"sonar-project.properties\"\nfile_type = \"properties\"\nvariable = \"sonar.projectVersion\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \".env\"\nfile_type = \"env\"\nvariable = \"VERSION\"\nversion_standard = \"default\"\n\n[[tool.bumpcalver.file]]\npath = \"setup.cfg\"\nfile_type = \"setup.cfg\"\nvariable = \"metadata.version\"\nversion_standard = \"python\"\n</code></pre>"},{"location":"examples/configuration/#bumpcalvertoml-configuration","title":"BumpCalver.TOML Configuration","text":"<p>File needs to be in the root and named bumpcalver.toml</p> <pre><code>version_format = \"{current_date}-{build_count:03}\"\ndate_format = \"%y.%m.%d\"\ntimezone = \"America/New_York\"\ngit_tag = true\nauto_commit = true\n\n[[file]]\npath = \"pyproject.toml\"\nfile_type = \"toml\"\nvariable = \"project.version\"\nversion_standard = \"python\"\n\n[[file]]\npath = \"examples/makefile\"\nfile_type = \"makefile\"\nvariable = \"APP_VERSION\"\nversion_standard = \"default\"\n\n[[file]]\npath = \"examples/dockerfile\"\nfile_type = \"dockerfile\"\nvariable = \"arg.VERSION\"\nversion_standard = \"default\"\n\n[[file]]\npath = \"examples/dockerfile\"\nfile_type = \"dockerfile\"\nvariable = \"env.APP_VERSION\"\nversion_standard = \"default\"\n\n[[file]]\npath = \"examples/p.py\"\nfile_type = \"python\"\nvariable = \"__version__\"\nversion_standard = \"python\"\n\n[[file]]\npath = \"sonar-project.properties\"\nfile_type = \"properties\"\nvariable = \"sonar.projectVersion\"\nversion_standard = \"default\"\n\n[[file]]\npath = \".env\"\nfile_type = \"env\"\nvariable = \"VERSION\"\nversion_standard = \"default\"\n\n[[file]]\npath = \"setup.cfg\"\nfile_type = \"setup.cfg\"\nvariable = \"metadata.version\"\nversion_standard = \"python\"\n</code></pre>"},{"location":"examples/filelayout/","title":"Example file layouts","text":"<p>Below are examples of various file types and how they could be setup using BumpCalver. As the intent of the library is to allow flexible use across different languages and use cases.</p>"},{"location":"examples/filelayout/#makefile","title":"MakeFile","text":"<pre><code># Variables\nREPONAME = bumpcalver\nAPP_VERSION = 2025.02.02\nPYTHON = python3\nPIP = $(PYTHON) -m pip\nPYTEST = $(PYTHON) -m pytest\n\nEXAMPLE_PATH = examples\nSERVICE_PATH = src\nTESTS_PATH = tests\nSQLITE_PATH = _sqlite_db\nLOG_PATH = log\n\nPORT = 5000\nWORKER = 8\nLOG_LEVEL = debug\n\nREQUIREMENTS_PATH = requirements.txt\n# DEV_REQUIREMENTS_PATH = requirements/dev.txt\n\n.PHONY: autoflake black cleanup create-docs flake8 help install isort run-example run-example-dev speedtest test\n\nautoflake: ## Remove unused imports and unused variables from Python code\n    autoflake --in-place --remove-all-unused-imports  --ignore-init-module-imports --remove-unused-variables -r $(SERVICE_PATH)\n    autoflake --in-place --remove-all-unused-imports  --ignore-init-module-imports --remove-unused-variables -r $(TESTS_PATH)\n    autoflake --in-place --remove-all-unused-imports  --ignore-init-module-imports --remove-unused-variables -r $(EXAMPLE_PATH)\n</code></pre>"},{"location":"examples/filelayout/#yaml","title":"YAML","text":"<pre><code>application:\n  description: This is an example application configuration file.\n  name: ExampleApp\nconfiguration:\n  version: 2025.02.02\ndatabase:\n  host: localhost\n  password: password\n  port: 5432\n  username: user\nfeatures:\n  feature_a: true\n  feature_b: false\n  feature_c: true\n</code></pre>"},{"location":"examples/filelayout/#xml","title":"XML","text":"<pre><code>&lt;configuration&gt;\n    &lt;version&gt;2025.02.02&lt;/version&gt;\n    &lt;application&gt;\n        &lt;name&gt;ExampleApp&lt;/name&gt;\n        &lt;description&gt;This is an example application configuration file.&lt;/description&gt;\n    &lt;/application&gt;\n    &lt;database&gt;\n        &lt;host&gt;localhost&lt;/host&gt;\n        &lt;port&gt;5432&lt;/port&gt;\n        &lt;username&gt;user&lt;/username&gt;\n        &lt;password&gt;password&lt;/password&gt;\n    &lt;/database&gt;\n    &lt;features&gt;\n        &lt;feature_a&gt;true&lt;/feature_a&gt;\n        &lt;feature_b&gt;false&lt;/feature_b&gt;\n        &lt;feature_c&gt;true&lt;/feature_c&gt;\n    &lt;/features&gt;\n&lt;/configuration&gt;\n</code></pre>"},{"location":"examples/filelayout/#toml","title":"TOML","text":"<pre><code>[configuration]\nversion = \"2025.02.02\"\n\n[configuration.application]\nname = \"ExampleApp\"\ndescription = \"This is an example application configuration file.\"\n\n[configuration.database]\nhost = \"localhost\"\nport = 5432\nusername = \"user\"\npassword = \"password\"\n\n[configuration.features]\nfeature_a = true\nfeature_b = false\nfeature_c = true\n</code></pre>"},{"location":"examples/filelayout/#json","title":"JSON","text":"<pre><code>{\n  \"version\": \"2025.02.02\",\n  \"application\": {\n    \"name\": \"ExampleApp\",\n    \"description\": \"This is an example application configuration file.\"\n  },\n  \"database\": {\n    \"host\": \"localhost\",\n    \"port\": 5432,\n    \"username\": \"user\",\n    \"password\": \"password\"\n  },\n  \"features\": {\n    \"feature_a\": true,\n    \"feature_b\": false,\n    \"feature_c\": true\n  }\n}\n</code></pre>"},{"location":"examples/filelayout/#dockerfile","title":"Dockerfile","text":"<pre><code># Use an official Python runtime as a parent image\nFROM python:3.14-slim\n\n# Set the working directory in the container\nWORKDIR /app\n\n# Copy the current directory contents into the container at /app\nCOPY . /app\n\n# Install any needed packages specified in requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Make port 80 available to the world outside this container\nEXPOSE 80\n\n# Define environment variable\nENV APP_VERSION=2025.02.02\nARG VERSION=2025.02.02\n# Run app.py when the container launches\nCMD [\"python\", \"app.py\"]\n</code></pre>"},{"location":"examples/filelayout/#properties-file-sonar-projectproperties","title":"Properties File (sonar-project.properties)","text":"<pre><code>sonar.projectKey=devsetgo_bumpcalver\nsonar.organization=devsetgo\nsonar.projectName=bumpcalver\nsonar.projectVersion=2025.02.02\nsonar.language=python\nsonar.sources=src\nsonar.tests=tests\nsonar.python.coverage.reportPaths=coverage.xml\nsonar.python.xunit.reportPath=report.xml\n</code></pre>"},{"location":"examples/filelayout/#environment-file-env","title":"Environment File (.env)","text":"<pre><code># Application Configuration\nDEBUG=true\nVERSION=2025.02.02\nDATABASE_URL=postgresql://localhost/mydb\nAPI_KEY=your-secret-api-key\nLOG_LEVEL=info\nPORT=5000\n</code></pre>"},{"location":"examples/filelayout/#setup-configuration-setupcfg","title":"Setup Configuration (setup.cfg)","text":"<pre><code>[metadata]\nname = example-package\nversion = 2025.02.02\nauthor = Your Name\nauthor_email = your.email@example.com\ndescription = A short description of the package\nlong_description = file: README.md\nlong_description_content_type = text/markdown\nurl = https://github.com/yourusername/example-package\nclassifiers =\n    Development Status :: 4 - Beta\n    Intended Audience :: Developers\n    License :: OSI Approved :: MIT License\n    Programming Language :: Python :: 3\n    Programming Language :: Python :: 3.9\n    Programming Language :: Python :: 3.10\n    Programming Language :: Python :: 3.11\n\n[options]\npackages = find:\npython_requires = &gt;=3.9\ninstall_requires =\n    click&gt;=8.0.0\n    toml&gt;=0.10.0\n\n[options.entry_points]\nconsole_scripts =\n    example-cli = example_package.cli:main\n</code></pre> <p>````</p> <p>```</p>"}]}